package number_bit

func ReverseBits(num uint32) uint32 {
	// 循环
	// var res uint32 = 0
	// for i := 0; i < 32; i++ {
	// 	res <<= 1
	// 	res += uint32((num & 1))
	// 	num >>= 1
	// }
	// return res

	// 分治法, 交换
	// 交换前后 16 位
	// 0000 0010 1001 0100 0001 1110 1001 1100
	num = (num >> 16) | (num << 16)
	// num:
	// 0001 1110 1001 1100 0000 0010 1001 0100

	// 交换 16 位中前后 8 位
	num = (num & 0b11111111000000001111111100000000 >> 8) | (num & 0b00000000111111110000000011111111 << 8)
	// num:
	// 1001 1100 0001 1110 1001 0100 0000 0010

	// 交换 8 位中前后 4 位
	num = (num & 0b11110000111100001111000011110000 >> 4) | (num & 0b00001111000011110000111100001111 << 4)
	// num:
	// 1100 1001 1110 0001 0100 1001 0010 0000

	// 交换 4 位中前后 2 位
	num = (num & 0b11001100110011001100110011001100 >> 2) | (num & 0b00110011001100110011001100110011 << 2)
	// num:
	// 0011 0110 1011 0100 0001 0110 1000 0000

	// 交换 2 位中前后 1 位
	num = (num & 0b10101010101010101010101010101010 >> 1) | (num & 0b01010101010101010101010101010101 << 1)
	// num:
	// 0011 1001 0111 1000 0010 1001 0100 0000

	return num
}
